Ophelia API and predefined script and template variables
========================================================


Page template context
---------------------

The context of a page template, i.e. the set of variables that can be accessed
by TALES expressions, contains:

* context: application-level context variables, modified by any relevant
           scripts, both more and less specific

* macros: macros defined by any relevant templates and loaded by scripts, both
          more and less specific

* innerslot: the "magic" slot filled by evaluating the next more specific
             template. Example use: <div tal:content="structure innerslot">

             Making this slot magic avoids writing any boilerplate code at
             all in run-of-the-mill templates and pages.

Script context
--------------

* context: see above

* macros: namespace of str, compiled macros encountered so far

* request: the request object passed by mod_python

* __publisher__: currently running Publisher instance, carrying some variables
             internally used by Ophelia's traversal mechanism:

             path: str, complete path to traverse from the template root

             root: str, absolute file system path to template root

             tail: list of str, path segments yet to traverse from here

             stack: list of str pairs, compiled templates encountered so far,
                                       together with their file paths

             history: list of str, partial paths traversed (including the
                      source file of the script being run) from template root,
                      paths referring to directories have a trailing slash

             file_path: str, absolute file system path to the source file of
                        the script being run

             isdir: bool, whether the current partial path refers to a
                    directory

             current: str, current partial path without trailing slash

             template: unicode, the decoded source of the current template

             splitter: an object responsible for splitting an input file into
                       script and template

                       Attributes:

                       script_encoding,
                       template_encoding: str, act as default encodings for
                                          any source files to be read yet

* tales_names: basis for the namespace available to TALES expressions in
               templates:

               context: see above

               macros: see above

* response_headers: dictionary mapping header names to TALES expressions that
                    are executed in the template context after interpreting
                    the templates

* log_error: the error logging function used by the publisher, takes a str as
             the only argument

After running all scripts, the publisher's "innerslot" attribute will hold the
inner slot as it is built while interpreting the template stack. It will be a
unicode string.


The Ophelia publisher
---------------------

To use the publisher or related functionality in a script or Python module:

import ophelia.publisher

The module defines the following items:

* StopTraversal: exception, see "controlling traversal" below

* NotFound: exception signalling that some file needed to respond to the
            request was not found

* Namespace: class whose instances do nothing but carry attributes

             Not using pure dictionaries here makes for more aesthetic code if
             nothing else. Namespaces can still be accessed as dictionaries.

* Publisher: an instance of this class is currently directing the execution of
             scripts and assembly of the HTTP response.

* get_script_globals: function returning the global namespace in which Ophelia
                      executes all Python scripts of the current request

* get_publisher: function returning the currently running Publisher instance

