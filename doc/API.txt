Ophelia API and predefined script and template variables
========================================================


Script context
--------------

Scripts are successively run in a namespace freshly initialized by Ophelia
with the following variable:

* __file__: the absolute file system path of the input file

* __publisher__: the currently running Publisher instance


Publisher
---------

Attributes internally used by Ophelia's traversal mechanism:

* context: namespace in which scripts are being executed

* macros: namespace of str, compiled macros encountered so far

* response_headers: dictionary mapping header names to TALES expressions that
                    are executed in the template context after interpreting
                    the templates

* innerslot: None during traversal and script execution,
             unicode after innermost template has been evaluated:
                     always the current content of the inner slot,
                     accessible by functions put in the context

* content: None during traversal and template evaluation,
           unicode after content is complete: equals innerslot, preceded by
           XML declaration and encoded with response_encoding

* request: the request object passed by mod_python

* log_error: the error logging function used  by the publisher, takes a str as
             the only argument

* splitter: splits an input file into script and template

            Attributes:

            script_encoding,
            template_encoding: str, act as default encodings for any source
                               files to be read yet

* response_encoding: str, encoding of the HTTP response

* path: str, partial URI path to traverse from site root to requested URI

* root: str, absolute file system path to template root

* site: str, absolute URI to site root

* tail: list of str, path segments yet to traverse from here

* stack: list of str pairs, compiled templates encountered so far, together
         with their file paths

* history: list of str, partial URIs traversed (including the source file of
           the script being run) from template root, paths referring to
           directories have a trailing slash

* file_path: str, absolute file system path to the directory containing the
             source file of the script being run

* current: str, current partial URI, includes a trailing slash if it
           references a directory

* template: unicode, the decoded source of the current template

Methods meant for use in scripts:

* load_macros(*args): load METAL macros from the files passed as arguments
                      (file names relative to current file path) into the
                      macros namespace


Page template context
---------------------

The context of a page template, i.e. the set of variables that can be accessed
by TALES expressions, contains:

* variables from the ZPT engine:

  - CONTEXTS
  - nothing
  - default
  - repeat
  - modules
  - loop

  For documentation, see
  <http://www.zope.org/Documentation/Books/ZopeBook/2_6Edition/AppendixC.stx>.

* variables added by Ophelia:

  - macros: namespace of compiled macros (see above), contains at this point
            all macros relevant to the requested path

  - innerslot: unicode, the "magic" slot filled by evaluating the next more
               specific template. Example use:
               <div tal:content="structure innerslot">

               Making this slot magic avoids writing any boilerplate code at
               all in run-of-the-mill templates and pages.

* all variables in the script context

Script variables using the same name as a variable defined by ZPT or Ophelia
will override that variable.


The publisher module
--------------------

To use the publisher or related functionality in a script or Python module:

import ophelia.publisher

The module defines the following items:

* StopTraversal: exception, see "controlling traversal" below

* NotFound: exception signalling that some file needed to respond to the
            request was not found

* Namespace: class whose instances do nothing but carry attributes

             Not using pure dictionaries here makes for more aesthetic code if
             nothing else. Namespaces can still be accessed as dictionaries.

* Publisher: an instance of this class is currently directing the execution of
             scripts and assembly of the HTTP response.

* get_publisher: function returning the currently running Publisher instance


Controlling traversal
---------------------

This is at the edge of Ophelia's scope.

Raising publisher.StopTraversal in a script prevents more specific scripts
from being executed and the current as well as more specific templates from
being evaluated. The exception accepts two optional parameters:

* content: str, used to fill the inner slot

* use_template: bool, whether to use the current template, defaults to False
