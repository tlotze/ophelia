===================
Configuring Ophelia
===================


Configuration files
===================

Ophelia's wsgiref-based HTTP server and the ``ophelia-dump`` script read their
configuration from a section of an INI-style configuration file. The
mod_python handler gets the same information from PythonOption variables set
in the Apache configuration.

Two variables must always be present:

:template_root:
    The file system path to the template root directory.

:site:
    The absolute URI of the Ophelia site's root, i.e. that part of a page's
    URI that is the same for all pages served from the template directory.

The wsgiref-based HTTP server needs additional information:

:host:
    The network interface to bind to.

:port:
    The TCP port to listen at on that interface.


URL canonicalization and redirection
====================================

If Ophelia encounters a URL that corresponds to a directory it behaves similar
to Apache in its default configuration: If the URL doesn't end with a slash,
it will redirect the browser to add the slash. If the slash is there, it will
try to find a template named index.html by default, and build the "index" page
from that.

There are two configuration options concerned with the index template. To
change the name of the index template Ophelia looks for from index.html to,
say, foobar.html, set the index_name option. In an Apache configuration, say::

    PythonOption "index_name" "foobar.html"

Additionally, Ophelia can be told to canonicalize URLs and redirect the
browser if the path portion of the URL ends with the default index page's
name. Provided the index name is the default index.html, a request to
<http://www.example.com/index.html> would be redirected to
<http://www.example.com/>. To achieve this, turn on the redirect_index option.
In an Apache configuration, this reads::

    PythonOption "redirect_index" On

Furthermore, Ophelia canonicalizes URLs containing path segments "." and ".."
according to :RFC:`3986` on generic URI syntax, and removes empty path
segments which are not at the end of the path. If the URL is changed by these
rules, Ophelia redirects the browser accordingly.


Character encoding
==================

Input encoding
--------------

You can declare a character encoding both for the Python script and the
template, and the two encodings may differ. To specify the Python encoding,
just start the script with a Python style encoding declaration like this::

# -*- coding: utf-8 -*-

The template's encoding is determined by looking at the "<?xml?>" tag::

<?xml coding="utf-8" ?>

specifies UTF-8 encoding for the template. The tag itself will be stripped
from the template and will not appear in the rendered page.

You may also specify a default encoding for any scripts and templates to be
read later during traversal. In a Python script, just do something like

::

    __request__.splitter.script_encoding = "utf-8"
    __request__.splitter.template_encoding = "utf-8"

A site-wide default can be set through options. In an Apache configuration,
this would read::

    PythonOption script_encoding "utf-8"
    PythonOption template_encoding "utf-8"

Failing any of these settings for scripts or templates, the respective default
encoding will be 7-bit ASCII.

Response encoding
-----------------

Ophelia uses unicode internally, but an HTTP response consists of one-byte
characters, so some encoding has to be applied in the end. This encoding is
automatically declared in the page's XML declaration as well as the response
headers.

To set the response encoding to, say, latin-1 in a script, do

::

    __request__.response_encoding = "latin-1"

To affect the response encoding site-wide, set the response_encoding option,
such as

::

    PythonOption response_encoding "latin-1"

in an Apache configuration. Failing any of these settings, the response
encoding defaults to UTF-8.
