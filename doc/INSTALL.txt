============
Installation
============


These instructions cover buildout-based installation as well as manual
installation for either running Ophelia in an Apache/mod_python setup, or
Ophelia's own wsgiref-based server.


Buildout-based
==============

- Create a buildout configuration, e.g. by copying the example configuration::

      cp buildout.cfg.example buildout.cfg

  In buildout.cfg, adjust the host, port, and servername or site settings. You
  can also override which buildout parts will be created, thus leaving out the
  mod_python or WSGI installation.

- In the distribution directory, bootstrap the buildout::

      python bootstrap/bootstrap

  where ``python`` is the Python executable you want to run the server with.
  You may also customize the buildout configuration to build and use its own
  Python.

- Run the buildout script::

      bin/buildout


Manual mod_python based installation
====================================

Prerequisites
-------------

- Apache2
- Python 2.4
- mod_python 3.3 or better
- Zope3 packages and their dependencies: zope.pagetemplate, zope.exceptions
- optionally the feedparser and zope.testing packages


Installation steps
------------------

- Copy the ophelia package into the library path of the Python installation
  used by mod_python, or configure mod_python's Python path according to where
  you put the ophelia package.

- Install needed parts of Zope3:

  + either build a complete Zope3 from source and make sure it's on
    mod_python's Python path, or

  + easy_install the zope.pagetemplate, zope.exceptions and optionally
    zope.testing eggs into mod_python's Python installation. Zope3 eggs can be
    obtained from the Python package index (`PyPI`_), and more recent ones
    (read: bleeding edge) from <http://download.zope.org/distribution/>.

- Install feedparser, either as an egg or from source. It's at the `PyPI`_.

- Choose places in the file system to put your site's Ophelia pages and static
  (non-Ophelia) documents, and configure Apache accordingly (see below).

- Cause Apache to reload its configuration.


Example Apache 2 configuration
------------------------------

Assume that the root of your site is published at
``<http://www.example.com/foo/bar/>``.

Assume further that your site uses the following file system locations on a
Unix system:

:/var/example/templates/: for the tree of Ophelia templates
:/var/example/python/:    for the Python packages
:/var/example/static/:    for the static stuff

To publish this site, add the following to your host's config::

    Alias /foo/bar /var/example/static
    <Location "/foo/bar">
        PythonPath "['/var/example/python'] + sys.path"
        PythonOption template_root /var/example/templates
        PythonOption site http://www.example.com/foo/bar/
        PythonFixupHandler ophelia.modpython
    </Location>

This instructs Apache to let Ophelia handle any URI under /foo/bar/. Ophelia
will build pages from templates where they exist, and Apache will serve files
from your static content otherwise.

It is possible to set the Ophelia handler only for directories or HTML
documents by applying some path name heuristics and matching the location
against a regular expression.

See doc/OVERVIEW.txt for other Python options Ophelia recognizes, and for
details on how Ophelia behaves.


Manual wsgiref installation
===========================

Prerequisites
-------------

- Python 2.4
- the wsgiref package
- Zope3 packages and their dependencies: zope.pagetemplate, zope.exceptions
- optionally the feedparser and zope.testing packages

Installation steps
------------------

Put everything in your Python path. All the parts needed may be installed as
eggs using easy_install::

    easy_install "ophelia[wsgi]"

Example wsgiref server configuration
------------------------------------

Create a configuration file, say, opheliasite.cfg::

    [DEFAULT]
    host = 127.0.0.1
    port = 8080
    template_root = /var/example/opheliasite
    site = http://localhost:8080/

and run the ophelia-wsgiref script on that file::

    ophelia-wsgiref -c opheliasite.cfg

You may want to wrap this call in a run-control script.


.. _`PyPI`: http://www.python.org/pypi
